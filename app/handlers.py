import asyncio
import logging
import random
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, URLInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.gsheets import GoogleSheetsDB, UnifiedGoogleSheetsDB
from app.keyboards import generate_answers_keyboard, generate_gender_selection_keyboard, generate_final_buttons_keyboard, generate_about_us_keyboard, generate_workbook_keyboard
from config import GOOGLE_CREDENTIALS_PATH, GOOGLE_CREDENTIALS_JSON, SPREADSHEET_KEY

logging.basicConfig(level=logging.INFO)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î - —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    global_db = UnifiedGoogleSheetsDB(
        credentials_path=GOOGLE_CREDENTIALS_PATH,
        credentials_json=GOOGLE_CREDENTIALS_JSON,
        spreadsheet_key=SPREADSHEET_KEY
    )
    logging.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ë–î: {e}")
    global_db = None

class Introduction(StatesGroup):
    awaiting_gender_selection = State()
    awaiting_promo_confirmation = State()
    awaiting_quiz_start = State()

class Quiz(StatesGroup):
    in_progress = State()
    awaiting_result_confirmation = State()


async def send_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_gender = user_data.get('selected_gender', 'female')
    
    if not global_db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    question_id = user_data.get('current_question_id', 1)

    question_data = global_db.get_question(question_id, user_gender)
    answers = global_db.get_answers(question_id, user_gender)

    if not question_data or not answers:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, /start.")
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ID: {question_id}")
        return

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    shuffled_answers = answers.copy()
    random.shuffle(shuffled_answers)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ ---
    answers_text_list = []
    for i, answer in enumerate(shuffled_answers):
        num = i + 1
        text = answer.get('answer_text', '')
        answers_text_list.append(f"<b>{num}.</b> {text}")
    
    answers_formatted_text = "\n\n".join(answers_text_list)

    full_question_text = (
        f"<b>{question_data.get('question_text', '')}</b>\n\n"
        f"{answers_formatted_text}\n\n"
        f"<i>{question_data.get('prompt_text', '')}</i>"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    await state.update_data(current_answers_order=shuffled_answers)

    await message.answer(
        full_question_text,
        reply_markup=generate_answers_keyboard(shuffled_answers, []),
        parse_mode="HTML"
    )

    await state.update_data(
        current_question_id=question_id,
        answered_in_question=[],
        click_count=0
    )
    await state.set_state(Quiz.in_progress)


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} started the conversation.")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –ø–æ–ª–∞
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤! üåü")
    await asyncio.sleep(1)
    
    await message.answer(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=generate_gender_selection_keyboard()
    )
    
    await state.set_state(Introduction.awaiting_gender_selection)


@router.callback_query(Introduction.awaiting_gender_selection, F.data.startswith('gender:'))
async def gender_selection_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
    await callback_query.answer()
    await callback_query.message.edit_reply_markup(reply_markup=None)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –∏–∑ callback_data
    gender = callback_query.data.split(':')[1]
    
    if gender not in ["male", "female"]:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback_query.message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–µ
    user_data = await state.get_data()
    test_mode = user_data.get('test_mode', False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ë–î
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_gender=gender)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        await loading_msg.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    gender_text = "–º—É–∂—á–∏–Ω–∞" if gender == "male" else "–∂–µ–Ω—â–∏–Ω–∞"
    await callback_query.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {gender_text} üëç")
    await asyncio.sleep(1)
    
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if test_mode:
        await handle_test_final_message(callback_query.message, global_db, gender)
        await state.clear()
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—é
    msg1_text = global_db.get_config_value('welcome_sequence_1').replace('\\n', '\n')
    msg2_text = global_db.get_config_value('welcome_sequence_2').replace('\\n', '\n')
    promo_text = global_db.get_config_value('promo_sequence').replace('\\n', '\n')
    
    await callback_query.message.answer(msg1_text)
    await asyncio.sleep(1.5)
    
    await callback_query.message.answer(msg2_text)
    await asyncio.sleep(1.5)

    button_text = global_db.get_config_value('promo_button_text')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data="start_instructions")]
    ])
    
    await callback_query.message.answer(promo_text, reply_markup=keyboard)
    await state.set_state(Introduction.awaiting_promo_confirmation)


@router.callback_query(Introduction.awaiting_promo_confirmation, F.data == "start_instructions")
async def instructions_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None) 
    
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await callback_query.answer()
        return
    
    # Config –ª–∏—Å—Ç –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª
    instruction_text = global_db.get_config_value('instruction_sequence').replace('\\n', '\n')
    button_text = global_db.get_config_value('start_button_text')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data="start_quiz_now")]
    ])
    
    await callback_query.message.answer(
        instruction_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(Introduction.awaiting_quiz_start)
    await callback_query.answer()


@router.callback_query(Introduction.awaiting_quiz_start, F.data == "start_quiz_now")
async def quiz_start_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    
    user_data = await state.get_data()
    user_gender = user_data.get('selected_gender', 'female')
    
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await callback_query.answer()
        return
    all_archetypes = global_db.get_all_archetypes(user_gender)
    if not all_archetypes:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. /start.")
        logging.error("–°–ø–∏—Å–æ–∫ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ø—É—Å—Ç.")
        return
        
    initial_scores = {archetype['archetype_id']: 0 for archetype in all_archetypes if 'archetype_id' in archetype}
    await state.update_data(scores=initial_scores, current_question_id=1)
    
    await send_question(callback_query.message, state)
    await callback_query.answer()


@router.callback_query(Quiz.in_progress, F.data.startswith('ans_num:'))
async def callback_answer_handler(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    click_count = user_data.get('click_count', 0)

    if click_count >= 3:
        await callback_query.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞.", show_alert=True)
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ ID ---
    answer_num = int(callback_query.data.split(':')[1])
    answers = user_data.get('current_answers_order', [])
    
    # –ù–æ–º–µ—Ä - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å + 1
    if not (0 < answer_num <= len(answers)):
        await callback_query.answer("–û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    selected_answer = answers[answer_num - 1]
    answer_id = selected_answer.get('answer_id')
    
    answered_in_question = user_data.get('answered_in_question', [])
    if answer_id in answered_in_question:
        await callback_query.answer("–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=False)
        return

    click_count += 1
    answered_in_question.append(answer_id)
    
    archetype_id = selected_answer.get('archetype_id')
    points = 3 - (click_count - 1)
    
    scores = user_data.get('scores', {})
    scores[archetype_id] = scores.get(archetype_id, 0) + points
    
    await state.update_data(
        click_count=click_count, 
        answered_in_question=answered_in_question,
        scores=scores
    )

    await callback_query.message.edit_reply_markup(
        reply_markup=generate_answers_keyboard(answers, answered_in_question)
    )

    if click_count == 3:
        await callback_query.answer("–ü—Ä–∏–Ω—è—Ç–æ! –í—Å–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã.", show_alert=False)
        await asyncio.sleep(1.5)

        current_question_id = user_data.get('current_question_id')
        if current_question_id == 19:
            await ask_to_show_results(callback_query.message, state)
        else:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
            await callback_query.message.delete()
            await state.update_data(current_question_id=current_question_id + 1)
            await send_question(callback_query.message, state)
    else:
        await callback_query.answer()


async def ask_to_show_results(message: Message, state: FSMContext):
    if not global_db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    # Config –ª–∏—Å—Ç –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª
    final_text = global_db.get_config_value('final_cta_text').replace('\\n', '\n')
    button_text = global_db.get_config_value('final_cta_button')
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, callback_data="show_final_result")]
    ])
    
    await message.answer(final_text, reply_markup=keyboard)
    await state.set_state(Quiz.awaiting_result_confirmation)


@router.callback_query(Quiz.awaiting_result_confirmation, F.data == "show_final_result")
async def show_results_handler(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)

    user_data = await state.get_data()
    scores = user_data.get('scores', {})
    
    if not scores:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. /start.")
        return
        
    sorted_archetypes = sorted(scores.items(), key=lambda item: item[1], reverse=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_gender = user_data.get('selected_gender', 'female')
    
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
        await callback_query.answer()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(sorted_archetypes) > 0:
        primary_archetype_id = sorted_archetypes[0][0]
        primary_result = global_db.get_archetype_result(primary_archetype_id, user_gender)
        if primary_result:
            text = primary_result.get('main_description', '').replace('\\n', '\n')
            if text:
                await callback_query.message.answer(text, parse_mode="HTML")
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(sorted_archetypes) > 1:
        secondary_1_id = sorted_archetypes[1][0]
        secondary_1_result = global_db.get_archetype_result(secondary_1_id, user_gender)
        if secondary_1_result:
            text = secondary_1_result.get('secondary_description', '').replace('\\n', '\n')
            if text:
                await callback_query.message.answer(text, parse_mode="HTML")
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(sorted_archetypes) > 2:
        secondary_2_id = sorted_archetypes[2][0]
        secondary_2_result = global_db.get_archetype_result(secondary_2_id, user_gender)
        if secondary_2_result:
            text = secondary_2_result.get('secondary_description', '').replace('\\n', '\n')
            if text:
                await callback_query.message.answer(text, parse_mode="HTML")
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PDF, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await send_final_media_and_payment(callback_query.message, global_db)
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()


@router.callback_query(F.data == "about_us")
async def about_us_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ –Ω–∞—Å'"""
    await callback_query.answer()
    
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç about_us –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    about_us_text = global_db.get_config_value('about_us')
    
    if about_us_text:
        formatted_text = about_us_text.replace('\\n', '\n')
        keyboard = generate_about_us_keyboard()
        await callback_query.message.answer(formatted_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.clear()


@router.callback_query(F.data == "workbook")
async def workbook_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å —Ä–∞–±–æ—á—É—é —Ç–µ—Ç—Ä–∞–¥—å magic book'"""
    await callback_query.answer()
    
    if not global_db:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç workbook –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    workbook_text = global_db.get_config_value('workbook')
    
    if workbook_text:
        formatted_text = workbook_text.replace('\\n', '\n')
        keyboard = generate_workbook_keyboard()
        await callback_query.message.answer(formatted_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–π —Ç–µ—Ç—Ä–∞–¥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


async def send_final_media_and_payment(message: Message, db: GoogleSheetsDB):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF —Å—Å—ã–ª–∫—É, –≤–∏–¥–µ–æ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏)
        pdf_url = db.get_config_value('final_pdf_url')
        video_url = db.get_config_value('final_video_url')
        payment_url = db.get_config_value('payment_url')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ Config
        final_message_text = db.get_config_value('final_message_text')
        payment_button_text = db.get_config_value('final_cta_button')
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logging.info(f"   PDF URL: '{pdf_url}' (–¥–ª–∏–Ω–∞: {len(pdf_url) if pdf_url else 0})")
        logging.info(f"   Video URL: '{video_url}' (–¥–ª–∏–Ω–∞: {len(video_url) if video_url else 0})")
        logging.info(f"   Payment URL: '{payment_url}'")
        logging.info(f"   Final message: {bool(final_message_text)}")
        logging.info(f"   Button text: '{payment_button_text}'")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        message_text = final_message_text or "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        formatted_text = message_text.replace('\\n', '\n')
        
        logging.info("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        keyboard = generate_final_buttons_keyboard()
        await message.answer(formatted_text, parse_mode="HTML", reply_markup=keyboard)
        
        # –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! üéâ")


@router.message(Command("help"))
async def help_handler(message: Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/start</code> ‚Äî –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ\n"
        "<code>/test</code> ‚Äî –¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "<code>/debug</code> ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        "<code>/help</code> ‚Äî –ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"
    )
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("test"))
async def test_handler(message: Message, state: FSMContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=generate_gender_selection_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    await state.set_state(Introduction.awaiting_gender_selection)
    await state.update_data(test_mode=True)


@router.message(Command("debug"))
async def debug_handler(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Config –ª–∏—Å—Ç–∞"""
    if not global_db:
        await message.answer("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    try:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        basic_keys = ['welcome_sequence_1', 'welcome_sequence_2', 'promo_sequence', 'promo_button_text', 'start_button_text']
        final_keys = ['final_cta_text', 'final_cta_button', 'final_proposition', 'final_pdf_url', 'final_video_url', 'payment_url']
        
        debug_info = "üîç <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        
        debug_info += "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏:</b>\n"
        for key in basic_keys:
            value = global_db.get_config_value(key)
            status = "‚úÖ" if value else "‚ùå"
            debug_info += f"{status} {key}: {bool(value)}\n"
        
        debug_info += "\n<b>–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏:</b>\n"
        for key in final_keys:
            value = global_db.get_config_value(key)
            status = "‚úÖ" if value else "‚ùå"
            debug_info += f"{status} {key}: {bool(value)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–¥–∏–∞-—Å—Å—ã–ª–æ–∫
            if key in ['final_pdf_url', 'final_video_url'] and value:
                debug_info += f"   üìé {key}: {value[:50]}{'...' if len(value) > 50 else ''}\n"
        
        await message.answer(debug_info, parse_mode="HTML")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞—Ö
        pdf_url = db.get_config_value('final_pdf_url')
        video_url = db.get_config_value('final_video_url')
        
        if pdf_url or video_url:
            media_info = "\nüîó <b>–ú–µ–¥–∏–∞-—Å—Å—ã–ª–∫–∏ (–ø–æ–ª–Ω—ã–µ):</b>\n\n"
            
            if pdf_url:
                media_info += f"üìÑ <b>PDF:</b>\n"
                media_info += f"   –î–ª–∏–Ω–∞: {len(pdf_url)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                media_info += f"   –°—Å—ã–ª–∫–∞: <code>{pdf_url}</code>\n\n"
            
            if video_url:
                media_info += f"üé• <b>–í–∏–¥–µ–æ:</b>\n"
                media_info += f"   –î–ª–∏–Ω–∞: {len(video_url)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                media_info += f"   –°—Å—ã–ª–∫–∞: <code>{video_url}</code>\n"
            
            await message.answer(media_info, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ—Å—Ç-—Ä–µ–∂–∏–º–∞
async def handle_test_final_message(message: Message, db: UnifiedGoogleSheetsDB, user_gender: str = "female"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    await message.answer("üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)</b>", parse_mode="HTML")
    await asyncio.sleep(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    all_archetypes = db.get_all_archetypes(user_gender)
    if not all_archetypes:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–µ—Ç–∏–ø—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞—Ä—Ö–µ—Ç–∏–ø–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_archetypes = all_archetypes[:3] if len(all_archetypes) >= 3 else all_archetypes
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(demo_archetypes) > 0:
        primary_archetype_id = demo_archetypes[0].get('archetype_id')
        if primary_archetype_id:
            primary_result = global_db.get_archetype_result(primary_archetype_id, user_gender)
            if primary_result:
                text = primary_result.get('main_description', '').replace('\\n', '\n')
                if text:
                    await message.answer(f"ü•á <b>–û—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ö–µ—Ç–∏–ø:</b>\n\n{text}", parse_mode="HTML")
                    await asyncio.sleep(0.5)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(demo_archetypes) > 1:
        secondary_1_id = demo_archetypes[1].get('archetype_id')
        if secondary_1_id:
            secondary_1_result = global_db.get_archetype_result(secondary_1_id, user_gender)
            if secondary_1_result:
                text = secondary_1_result.get('secondary_description', '').replace('\\n', '\n')
                if text:
                    await message.answer(f"ü•à <b>–í—Ç–æ—Ä–∏—á–Ω—ã–π –∞—Ä—Ö–µ—Ç–∏–ø:</b>\n\n{text}", parse_mode="HTML")
                    await asyncio.sleep(0.5)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –∞—Ä—Ö–µ—Ç–∏–ø
    if len(demo_archetypes) > 2:
        secondary_2_id = demo_archetypes[2].get('archetype_id')
        if secondary_2_id:
            secondary_2_result = global_db.get_archetype_result(secondary_2_id, user_gender)
            if secondary_2_result:
                text = secondary_2_result.get('secondary_description', '').replace('\\n', '\n')
                if text:
                    await message.answer(f"ü•â <b>–¢—Ä–µ—Ç–∏–π –∞—Ä—Ö–µ—Ç–∏–ø:</b>\n\n{text}", parse_mode="HTML")
                    await asyncio.sleep(0.5)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    await send_final_media_and_payment(message, db)
    
    await message.answer("‚úÖ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.", parse_mode="HTML")